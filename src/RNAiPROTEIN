'''NAME
RNAiPROTEIN
VERSION
1.0
AUTHOR
Andres Rivera Ramirez
DESCRIPTION
Programa para convertir una secuencia de RNA o DNA de un arhcivo dado en una secuencia de aminoacidos.
CATEGORY
USAGE
    python_class/src/RNAiPROTEIN.py [-h] -i El path del archivo de entrada
                        
ARGUMENTS
  -h, --help            show this help message and exit
  -i El path del archivo de entrada, 
  -r Para convertir una secuencia de RNA en una de aminoacidos debe ser igual a uno
  -d Para convertir una secuencia de DNA en una de aminoacidos debe ser igual a uno
SEE ALSO
'''


import argparse


parser = argparse.ArgumentParser(
    description="Este programa convierte una secuencia de DNA o RNA introducida en una secuencia de aminácidos")

parser.add_argument("-i",
                    metavar="El path del archivo de entrada que contiene la secuencia de RNA o DNA",
                    help="Archivo de secuencias de DNA o RNA",
                    required=True)
parser.add_argument("-r",
                    metavar="Opcion para RNA",
                    required=False,
                    default=0

                    )
parser.add_argument("-d",
                    metavar="Opcion para dna",
                    required=False,
                    default=0
                    )

args = parser.parse_args()
# Diccionario con los codones correspondientes al codigo de DNA
gencode = {
    'ATA': 'I', 'ATC': 'I', 'ATT': 'I', 'ATG': 'M', 'ACA': 'T',
    'ACC': 'T', 'ACG': 'T', 'ACT': 'T', 'AAC': 'N', 'AAT': 'N',
    'AAA': 'K', 'AAG': 'K', 'AGC': 'S', 'AGT': 'S', 'AGA': 'R',
    'AGG': 'R', 'CTA': 'L', 'CTC': 'L', 'CTG': 'L', 'CTT': 'L',
    'CCA': 'P', 'CCC': 'P', 'CCG': 'P', 'CCT': 'P', 'CAC': 'H',
    'CAT': 'H', 'CAA': 'Q', 'CAG': 'Q', 'CGA': 'R', 'CGC': 'R',
    'CGG': 'R', 'CGT': 'R', 'GTA': 'V', 'GTC': 'V', 'GTG': 'V',
    'GTT': 'V', 'GCA': 'A', 'GCC': 'A', 'GCG': 'A', 'GCT': 'A',
    'GAC': 'D', 'GAT': 'D', 'GAA': 'E', 'GAG': 'E', 'GGA': 'G',
    'GGC': 'G', 'GGG': 'G', 'GGT': 'G', 'TCA': 'S', 'TCC': 'S',
    'TCG': 'S', 'TCT': 'S', 'TTC': 'F', 'TTT': 'F', 'TTA': 'L',
    'TTG': 'L', 'TAC': 'Y', 'TAT': 'Y', 'TAA': '_', 'TAG': '_',
    'TGC': 'C', 'TGT': 'C', 'TGA': '_', 'TGG': 'W'}


# Diccionario con los codones correspondientes al codigo de RNA
gencode2 = {
    'AUA': 'I', 'AUC': 'I', 'AUU': 'I', 'AUG': 'M', 'AUA': 'T',
    'ACC': 'T', 'ACG': 'T', 'ACU': 'T', 'AAC': 'N', 'AAU': 'N',
    'AAA': 'K', 'AAG': 'K', 'AGC': 'S', 'AGU': 'S', 'AGA': 'R',
    'AGG': 'R', 'CUA': 'L', 'CUC': 'L', 'CUG': 'L', 'CUU': 'L',
    'CCA': 'P', 'CCC': 'P', 'CCG': 'P', 'CCU': 'P', 'CAC': 'H',
    'CAT': 'H', 'CAA': 'Q', 'CAG': 'Q', 'CGA': 'R', 'CGC': 'R',
    'CGG': 'R', 'CGU': 'R', 'GUA': 'V', 'GUC': 'V', 'GUG': 'V',
    'GUU': 'V', 'GCA': 'A', 'GCC': 'A', 'GCG': 'A', 'GCU': 'A',
    'GAC': 'D', 'GAU': 'D', 'GAA': 'E', 'GAG': 'E', 'GGA': 'G',
    'GGC': 'G', 'GGG': 'G', 'GGU': 'G', 'UCA': 'S', 'UCC': 'S',
    'UCG': 'S', 'UCU': 'S', 'UUC': 'F', 'UUU': 'F', 'UUA': 'L',
    'UUG': 'L', 'UAC': 'Y', 'UAU': 'Y', 'UAA': '_', 'UAG': '_',
    'UGC': 'C', 'UGU': 'C', 'UGA': '_', 'UGG': 'W'}

# Si no se introdujo una opcion para un tipo de secuencia u otra se detiene el programa
if (args.r == 0 and args.d == 0):
    raise ValueError("No se especifico el tipo de secuencia")

try:
    with open(args.i) as file:
        secuencia = file.read()
except IOError as ex:
    print("NO es posible abrir eñ archivo: n" + ex.strerror)

proteina = ""
codon = ""

# Las dos funciones operan de la misma forma, recorriendo la secuencia en grupos de tres para buscar en el diccionario ese codon, de ser asi añade el valor asociado al codon a oa cadena proteina
if (args.d):
    i = 0
    for num in range(0, int((len(secuencia) / 3))):
        codon = secuencia[num + i:num + (i + 3)]
        i += 2
        for key, value in gencode.items():
            if (codon == key):
                proteina += value
            else:
                continue
    print(proteina)

if (args.r):
    i = 0
    for num in range(0, int((len(secuencia) / 3))):
        codon = secuencia[num + i:num + (i + 3)]
        i += 2
        for key, value in gencode2.items():
            if (codon == key):
                proteina += value
            else:
                continue
    print(proteina)
